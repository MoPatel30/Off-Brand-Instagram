[{"C:\\Users\\mopat\\instagram\\frontend\\src\\index.js":"1","C:\\Users\\mopat\\instagram\\frontend\\src\\App.js":"2","C:\\Users\\mopat\\instagram\\frontend\\src\\firebase.js":"3","C:\\Users\\mopat\\instagram\\frontend\\src\\store\\index.js":"4","C:\\Users\\mopat\\instagram\\frontend\\src\\Profile\\Profile.js":"5","C:\\Users\\mopat\\instagram\\frontend\\src\\CreatePost\\CreatePost.js":"6","C:\\Users\\mopat\\instagram\\frontend\\src\\Login\\Login.js":"7","C:\\Users\\mopat\\instagram\\frontend\\src\\PhotoFeed\\PhotoFeed.js":"8"},{"size":641,"mtime":1610005446562,"results":"9","hashOfConfig":"10"},{"size":2572,"mtime":1610840628757,"results":"11","hashOfConfig":"10"},{"size":810,"mtime":1610005641969,"results":"12","hashOfConfig":"10"},{"size":685,"mtime":1608697815934,"results":"13","hashOfConfig":"10"},{"size":4420,"mtime":1610005390927,"results":"14","hashOfConfig":"10"},{"size":9890,"mtime":1610005290143,"results":"15","hashOfConfig":"10"},{"size":5416,"mtime":1610005351680,"results":"16","hashOfConfig":"10"},{"size":1041,"mtime":1610005368026,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gcn5sq",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mopat\\instagram\\frontend\\src\\index.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\App.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\firebase.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\store\\index.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\Profile\\Profile.js",["37","38"],"import React, {useState, useEffect} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport \"./Profile.css\"\r\nimport db from \"../firebase\";\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\n\r\n\r\nfunction Profile({ username, userID, userPhoto, likes, posts, bio }) {\r\n    const [editBio, setEditBio] = useState(false)\r\n    const [desc, setDesc] = useState(\"This is my bio\")\r\n\r\n    function changeBio(){\r\n        console.log(userPhoto)\r\n        if(!editBio){\r\n            setEditBio(true)\r\n        }\r\n        else{\r\n            setEditBio(false)\r\n        }\r\n    }\r\n\r\n    function updateBio(){\r\n        db.collection(\"profiles\")    \r\n            .doc(userID).update({bio: desc})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"profile-body\" style = {{backgroundColor: \"#f8f9f5\"}}>\r\n            <h1 id = \"profile-header\" style = {{marginBottom: \"20px\"}}>{username}'s Profile</h1>\r\n\r\n            <div className = \"user-picture\">\r\n                <img id = \"pro-pic\" src = {userPhoto} alt= \"pro pic\" />\r\n            </div>\r\n\r\n       \r\n            <div className = \"bio\">\r\n                <p>{bio}</p>\r\n                <button onClick = {changeBio}>Edit Bio</button>\r\n                {editBio ? \r\n                    <div>\r\n                        <input type = \"text\" onChange = {(e) => {setDesc(e.target.value)}}></input>\r\n                        <button onClick = {updateBio}>Update</button>\r\n                    </div>\r\n              \r\n                    :(\r\n                        null\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{username} has {posts} posts</p>\r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{username} has liked {likes} posts</p>\r\n            </div>\r\n        \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.username,\r\n        userPhoto: state.userPhoto,\r\n        userID: state.userID,\r\n        likes: state.likes,\r\n        posts: state.posts,\r\n        bio: state.bio\r\n    }\r\n  }\r\n  \r\n  \r\nexport default connect(mapStateToProps)(Profile);\r\n  \r\n\r\n\r\n\r\n\r\nexport function ViewProfiles(props){\r\n    const [user, setUser] = useState(props.username)\r\n    const [photo, setPhoto] = useState(\"\")\r\n    const [bio, setBio] = useState(\"\")\r\n    const [likes, setLikes] = useState(0)\r\n    const [posts, setPosts] = useState(0)\r\n    console.log(props.username)\r\n    const [displayProfile, setDisplayProfile] = useState(true)\r\n \r\n\r\n    useEffect(() => {\r\n        var profileNames = []\r\n\r\n        db.collection(\"profiles\").onSnapshot(function(doc) {\r\n            doc.forEach((info) => {       \r\n                profileNames.push(info)\r\n            })\r\n\r\n            for(let i = 0; i < profileNames.length; i++){\r\n                var userInfo = profileNames[i]\r\n                \r\n                if(userInfo.data().username === user){\r\n                    setBio(userInfo.data().bio)\r\n                    setLikes(userInfo.data().likes)\r\n                    setPosts(userInfo.data().posts) \r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    }, [user])\r\n\r\n    function toggleProfile(){     \r\n        setDisplayProfile(!displayProfile)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        {displayProfile ? \r\n        <div className = \"profile-body\" style = {{backgroundColor: \"#f8f9f5\"}}>\r\n\r\n            <h1 style = {{marginBottom: \"20px\"}}>{user}'s Profile</h1>\r\n\r\n            <div className = \"user-picture\">\r\n                <img id = \"pro-pic\" src = {photo} alt= \"pro pic\" />\r\n            </div>\r\n\r\n            <div className = \"bio\">\r\n                <p>{bio}</p>\r\n        \r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{user} has {posts} posts</p>\r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{user} has liked {likes} posts</p>\r\n            </div>\r\n\r\n            <button onClick = {toggleProfile}>close</button>\r\n\r\n        </div>\r\n        :(\r\n            <div>\r\n                <p></p>\r\n            </div>\r\n        )\r\n        }\r\n        </div>\r\n        \r\n    \r\n    )\r\n}\r\n\r\n","C:\\Users\\mopat\\instagram\\frontend\\src\\CreatePost\\CreatePost.js",["39","40","41"],"import React, {useState} from \"react\"\r\nimport \"./CreatePost.css\"\r\nimport db from \"../firebase\";\r\nimport {storage} from \"../firebase\"\r\nimport 'firebase/firestore';\r\nimport firebase from \"firebase\";\r\nimport 'firebase/storage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Button from '@material-ui/core/Button';\r\nimport {connect} from 'react-redux';\r\nimport {ViewProfiles} from '../Profile/Profile'\r\n\r\n\r\n\r\n\r\nexport function CreatePost(props) {\r\n    const [form, setForm] = useState(\"\")\r\n    const [submitted, setSubmitted] = useState(false)\r\n\r\n    const makePost = (e) => {\r\n        e.preventDefault()\r\n        if(!submitted){\r\n            setForm(<MakePostForm user = {props.user} />)\r\n            setSubmitted(true)\r\n        }\r\n        else{\r\n            setForm(null)\r\n            setSubmitted(false)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className = \"upload-btn\">\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                onClick = {makePost}\r\n                startIcon={<CloudUploadIcon />}\r\n            >Upload Image</Button>\r\n\r\n            <div>\r\n                <p>{form}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction MakePostForm({userID, posts, username}){\r\n    const date = String((new Date().getMonth() + 1) + '/' + new Date().getDate() + '/' + (new Date().getFullYear())) \r\n    const [pic, setPic] = useState(null)\r\n    const [desc, setDesc] = useState(\"\")\r\n \r\n\r\n    const ImageChange = (e) => {\r\n        e.preventDefault()\r\n        if(e.target.files[0]){\r\n            setPic(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    const ImageUpload = (e) => {\r\n        e.preventDefault()\r\n        \r\n        const uploadTask = storage.ref(`posts/${pic.name}`).put(pic)\r\n        var number = Math.floor(Math.random() * 100000000)\r\n        updateUserPostCount(userID)\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n                console.log(\"posting\")\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n            },\r\n            () => {\r\n                storage\r\n                    .ref(\"posts\")\r\n                    .child(pic.name)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        var post = {\r\n                            name: username,\r\n                            date: date,\r\n                            photo: url,\r\n                            description: String(desc),\r\n                            likes: 0,\r\n                            id: String(number),\r\n                            likedBy: new Array(),\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n\r\n                        }\r\n     \r\n                        db.collection(\"posts\").doc(String(number)).set(post)\r\n                            .then(function() {\r\n                                console.log(\"Document successfully written!\");\r\n                            })\r\n                            .catch(function(error) {\r\n                                console.error(\"Error writing document: \", error);\r\n                            });\r\n\r\n                        setDesc(\"\")\r\n                        setPic(null)\r\n\r\n                    })\r\n            }\r\n\r\n        )\r\n\r\n        document.getElementById(\"form\").style.visibility = \"hidden\";\r\n            \r\n    }\r\n\r\n\r\n    function updateUserPostCount(userID){\r\n        console.log(userID)\r\n        db.collection(\"profiles\").doc(userID).update({posts: posts + 1})\r\n            .then(function() {\r\n                console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function(error) {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n\r\n    function closeForm(){\r\n        document.getElementById(\"form\").style.visibility = \"hidden\";\r\n        setDesc(\"\")\r\n        setPic(null)\r\n    }\r\n\r\n\r\n    return(\r\n        <div id = \"form\" className = \"post-form\">\r\n            <form className = \"form-items\">\r\n                <h2 id = \"username\">{username}</h2>\r\n                <p id = \"timestamp\">{date}</p>\r\n                <div className = \"input-forms\">\r\n                    <label className = \"label-forms\">Upload Photo: </label>                   \r\n                    <input style = {{marginBottom: \"25px\"}} id = \"picture\" type=\"file\" onChange = {ImageChange}/>\r\n                   \r\n                    <TextField\r\n                        style = {{marginBottom: \"15px\"}}\r\n                        className = \"post-description\"\r\n                        id=\"outlined-multiline-static\"\r\n                        label=\"Description\"\r\n                        multiline\r\n                        rows={4}\r\n                        defaultValue=\"\"\r\n                        variant=\"outlined\"\r\n                        onChange = {(e) => {setDesc(e.target.value)}}\r\n                    />\r\n              \r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick = {closeForm}\r\n                > Close </Button>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type = \"submit\"\r\n                    onClick = {ImageUpload}\r\n                > Post </Button>\r\n                        \r\n            </form>        \r\n        </div>\r\n                 \r\n    )\r\n   \r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.username,\r\n        userID: state.userID,\r\n        posts: state.posts\r\n    }\r\n}\r\n  \r\n  \r\nexport default connect(mapStateToProps)(MakePostForm);\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\nexport function NewPost(props, {userID, liked}){\r\n    const [likes, setLikes] = useState(props.likes)\r\n    const [likedByTheseUsers, setLikedByTheseUsers] = useState(props.likedBy)\r\n\r\n\r\n    function likePost(postId, username){ \r\n        if(likedByTheseUsers.indexOf(props.username) === -1){    \r\n            setLikes(likes + 1)            \r\n            db.collection(\"posts\").doc(`${postId}`).update({likes: likes+1})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n            \r\n            var tempLikedByTheseUsers = likedByTheseUsers\r\n            tempLikedByTheseUsers.push(username)\r\n            setLikedByTheseUsers(tempLikedByTheseUsers)\r\n            console.log(likedByTheseUsers)\r\n\r\n            db.collection(\"posts\").doc(`${postId}`).update({likedBy: likedByTheseUsers})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n\r\n            db.collection(\"posts\").doc(`${postId}`).update({likes: likedByTheseUsers.length})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n\r\n            updateUserLikeCount()\r\n        }   \r\n                   \r\n    }\r\n\r\n\r\n    function updateUserLikeCount(){\r\n\r\n        db.collection(\"profiles\").doc(userID).update({likes: liked + 1})\r\n        \r\n    }\r\n\r\n\r\n    return( \r\n        <div>\r\n          \r\n            <div className = \"post-body\">\r\n                <div className = \"post-header\">\r\n                    <h2 id = \"user-name\" className = \"post-text\" style = {{paddingLeft: \"5px\"}}>{props.name}</h2>\r\n                    <h2 className = \"post-text\" style = {{paddingRight: \"5px\"}}>{props.date}</h2>\r\n                </div>\r\n\r\n                <div className = \"post-img\">\r\n                    <img id = \"display-image\" style = {{minWidth: \"400px\", minHeight: \"400px\"}} alt = \"Picture not available\" src= {props.photo} />\r\n                    \r\n                </div>\r\n\r\n                <div className = \"post-description\">\r\n                    <p id = \"description-text\"><b>Description: </b> {props.description} </p>\r\n                </div>\r\n                \r\n                <div className = \"post-likes\">                   \r\n                    <p id = \"likes-text\"><b> Likes: </b> {props.likes} </p> \r\n                    <FavoriteIcon  style = {{color: 'red'}} onClick = {() => {likePost(props.id, props.username)}} cursor = \"pointer\" />\r\n                  \r\n                </div>\r\n            </div>\r\n        \r\n        </div>\r\n    \r\n    )  \r\n}\r\n\r\n  \r\n\r\nconst mapStateToPropsTwo = state => {\r\n    return {   \r\n        userID: state.userID,\r\n        liked: state.likes\r\n    }\r\n}\r\n\r\nconnect(mapStateToPropsTwo)(NewPost)\r\n\r\n\r\n\r\n\r\nexport function ModalPost(){\r\n\r\n    return(\r\n        <div>\r\n           <button type=\"button\" class=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\">Open Modal</button>\r\n\r\n            <div id=\"myModal\" class=\"modal fade\" role=\"dialog\">\r\n            <div class=\"modal-dialog\">\r\n\r\n                <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 class=\"modal-title\">Modal Header</h4>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <p>Some text in the modal.</p>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\r\n                </div>\r\n                </div>\r\n\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\mopat\\instagram\\frontend\\src\\Login\\Login.js",["42","43"],"import React, {useState, useEffect} from 'react'\r\nimport \"./Login.css\";\r\nimport {auth, provider} from \"../firebase\"\r\nimport {connect} from \"react-redux\"\r\nimport store from \"../store/index\"\r\nimport db from \"../firebase\"\r\n\r\n\r\n\r\nfunction Login() {\r\n\r\n    const [userInfo, setUserInfo] = useState(null)\r\n    const [isNewProfile, setIsNewProfile] = useState(null)\r\n    const [checkProfiles, setCheckProfiles] = useState(null)\r\n\r\n    function signIn(){\r\n        auth\r\n            .signInWithPopup(provider)\r\n            .then((result) => {\r\n              \r\n                console.log(result.user)\r\n                setUserInfo(result.user)\r\n                     \r\n            }) \r\n            .catch((error) => alert(error.message))\r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n        if(checkProfiles !== null){\r\n            checkForProfile(userInfo.displayName)\r\n        }\r\n    }, [checkProfiles])\r\n\r\n    useEffect(() => {\r\n\r\n        if(userInfo !== null){\r\n            setCheckProfiles(true)\r\n            if(isNewProfile !== null){\r\n                console.log(isNewProfile)\r\n                \r\n                if(isNewProfile === false){\r\n                    \r\n                    var profileNames = []\r\n                \r\n                    db.collection(\"profiles\").onSnapshot(function(doc) {\r\n                        doc.forEach((info) => {         \r\n                            profileNames.push(info)   \r\n                        })\r\n                \r\n                        for(let i = 0; i < profileNames.length; i++){\r\n                            var curUserInfo = profileNames[i]\r\n                   \r\n                            if(curUserInfo.data().username === userInfo.displayName){\r\n                                store.dispatch({\r\n            \r\n                                type: \"ADD_POST\",\r\n                                    payload:\r\n                                    {   \r\n                                        username: curUserInfo.data().username,\r\n                                        userphoto: userInfo.photoURL,\r\n                                        userID: curUserInfo.id,\r\n                                        likes: curUserInfo.data().likes,\r\n                                        posts: curUserInfo.data().posts,\r\n                                        bio: curUserInfo.data().bio\r\n                                                \r\n                                    }\r\n                                })\r\n  \r\n                            }\r\n                        }\r\n            \r\n                    })\r\n                        \r\n                }\r\n                else{\r\n                    \r\n                    var userId = createProfile(userInfo.displayName)\r\n                    updateState(userInfo.displayName, userInfo.photoURL, userId)         \r\n                }  \r\n            }\r\n        }\r\n        \r\n    }, [userInfo, isNewProfile])\r\n\r\n\r\n\r\n    function checkForProfile(username){\r\n        \r\n        let profileNames = []\r\n      \r\n        db.collection(\"profiles\").get().then((doc) => {\r\n            doc.forEach((info) => {       \r\n                profileNames.push(info.data().username)\r\n                    \r\n            })\r\n            console.log(profileNames)\r\n            for(let i = 0; i < profileNames.length; i++){\r\n                \r\n                var name = profileNames[i]\r\n          \r\n                if(name === username){\r\n                    setIsNewProfile(false)\r\n                }\r\n            \r\n            }\r\n           \r\n            console.log(\"hi \" + String(isNewProfile))\r\n            if(isNewProfile === null){\r\n                setIsNewProfile(true)\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    function createProfile(username){\r\n\r\n        const post = {\r\n            username: username,\r\n            bio: \"Edit your bio\",\r\n            likes: 0,\r\n            posts: 0\r\n        }      \r\n        \r\n\r\n        var number = Math.floor(Math.random() * 999999999)\r\n\r\n        if(isNewProfile){\r\n            \r\n            db.collection(\"profiles\").doc(String(number)).set(post)\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });    \r\n       \r\n        }\r\n        //setUserID(String(number))\r\n        return String(number)\r\n\r\n    }\r\n\r\n    function updateState(name, photoURL, userId){\r\n       \r\n        store.dispatch({\r\n            type: \"ADD_POST\",\r\n            payload:\r\n            {   \r\n                username: name,\r\n                userphoto: photoURL,\r\n                userID: userId,\r\n                likes: 0,\r\n                posts: 0,\r\n                bio: \"Edit your own personal bio!\"\r\n                      \r\n            }\r\n          })\r\n    }\r\n\r\n\r\n    return (\r\n        <div id = \"login-pos\">\r\n            <div className = \"login-screen\">\r\n                <h1 id = \"welcome\"><i>Welcome to PhotoShare</i></h1>\r\n                <p id = \"slogan\"><i>Share your moments with the world</i></p>\r\n                <h2 id = \"title\"> Sign In </h2>\r\n                <button id = \"google-btn\" onClick = {signIn}>Google</button>\r\n            </div>        \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        dispatch\r\n    }\r\n}\r\nexport default connect(mapDispatchToProps)(Login)\r\n\r\n","C:\\Users\\mopat\\instagram\\frontend\\src\\PhotoFeed\\PhotoFeed.js",[],{"ruleId":"44","severity":1,"message":"45","line":93,"column":18,"nodeType":"46","messageId":"47","endLine":93,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":94,"column":19,"nodeType":"46","messageId":"47","endLine":94,"endColumn":27},{"ruleId":"44","severity":1,"message":"49","line":13,"column":9,"nodeType":"46","messageId":"47","endLine":13,"endColumn":21},{"ruleId":"50","severity":1,"message":"51","line":97,"column":38,"nodeType":"52","messageId":"53","endLine":97,"endColumn":49},{"ruleId":"54","severity":1,"message":"55","line":262,"column":21,"nodeType":"56","endLine":262,"endColumn":148},{"ruleId":"57","severity":1,"message":"58","line":33,"column":8,"nodeType":"59","endLine":33,"endColumn":23,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":84,"column":8,"nodeType":"59","endLine":84,"endColumn":32,"suggestions":"62"},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","'setPhoto' is assigned a value but never used.","'ViewProfiles' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkForProfile' and 'userInfo.displayName'. Either include them or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has a missing dependency: 'createProfile'. Either include it or remove the dependency array.",["64"],{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [checkForProfile, checkProfiles, userInfo.displayName]",{"range":"69","text":"70"},"Update the dependencies array to be: [userInfo, isNewProfile, createProfile]",{"range":"71","text":"72"},[880,895],"[checkForProfile, checkProfiles, userInfo.displayName]",[2874,2898],"[userInfo, isNewProfile, createProfile]"]