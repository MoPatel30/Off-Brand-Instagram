[{"C:\\Users\\mopat\\instagram\\frontend\\src\\index.js":"1","C:\\Users\\mopat\\instagram\\frontend\\src\\App.js":"2","C:\\Users\\mopat\\instagram\\frontend\\src\\create-post.js":"3","C:\\Users\\mopat\\instagram\\frontend\\src\\photo-feed.js":"4","C:\\Users\\mopat\\instagram\\frontend\\src\\firebase.js":"5","C:\\Users\\mopat\\instagram\\frontend\\src\\Login.js":"6","C:\\Users\\mopat\\instagram\\frontend\\src\\store\\index.js":"7","C:\\Users\\mopat\\instagram\\frontend\\src\\Profile.js":"8"},{"size":641,"mtime":1608149127376,"results":"9","hashOfConfig":"10"},{"size":3164,"mtime":1608694068209,"results":"11","hashOfConfig":"10"},{"size":10506,"mtime":1608694190252,"results":"12","hashOfConfig":"10"},{"size":1037,"mtime":1608672627234,"results":"13","hashOfConfig":"10"},{"size":810,"mtime":1608681132796,"results":"14","hashOfConfig":"10"},{"size":4559,"mtime":1608683430843,"results":"15","hashOfConfig":"10"},{"size":673,"mtime":1608673326063,"results":"16","hashOfConfig":"10"},{"size":4400,"mtime":1608693923462,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1gcn5sq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\mopat\\instagram\\frontend\\src\\index.js",[],["39","40"],"C:\\Users\\mopat\\instagram\\frontend\\src\\App.js",["41"],"import React, {useState} from \"react\"\nimport './App.css';\nimport MakePostForm from \"./create-post\"\nimport PhotoFeed from \"./photo-feed\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from '@material-ui/core/Button';\nimport Login from './Login'\nimport {connect} from 'react-redux';\nimport Profile from \"./Profile\";\nimport {ModalPost} from \"./create-post\"\n\n\nfunction App({ username }) {\n  // const [user, setUser] = useState(username)\n  const [form, setForm] = useState(null)\n  const [submitted, setSubmitted] = useState(false)\n  const [profile, setProfile] = useState(false)\n\n  const makePost = (e) => {\n      e.preventDefault()\n      if(!submitted){\n          setForm(<MakePostForm user = {username} />)\n          setSubmitted(true)\n      }\n      else{\n          setForm(null)\n          setSubmitted(false)\n      }\n\n  }\n\n  const showProfile = (e) => {\n    e.preventDefault()\n    if(!profile){\n      setProfile(true)\n    }\n    else{\n      setProfile(false)\n    }\n\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      { username ? \n      <div className = \"header\">\n        <nav id = \"header\" className = \"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\n          \n          <div id = \"title-header\">\n            <h1 style = {{color: \"white\", textAlign: \"left\", fontSize: \"2rem\"}}><i>PhotoShare</i></h1>\n          </div>\n\n          <div id = \"welcome-header\">\n            <h1 style = {{color: \"white\", textAlign: \"center\", fontSize: \"1.5rem\"}}> Welcome, {username}!</h1>\n          </div>\n \n            <div className = \"buttons\">\n            <Button onClick = {makePost} className = \"buttons\" variant=\"contained\" cursor = \"pointer\" color=\"primary\" href=\"\">\n                Post\n              </Button>\n              <Button onClick = {showProfile} className = \"buttons\" variant=\"contained\" cursor = \"pointer\" color=\"primary\" href=\"\">\n                Profile\n              </Button>\n              <Button className = \"buttons\" variant=\"contained\" cursor = \"pointer\" color=\"secondary\" href=\"/login\">\n                Logout\n              </Button>\n        \n            </div>   \n                 \n        </nav>\n      </div>\n        :(\n          <Login />\n        )\n      }\n\n      \n      <div className = \"App-body\">\n      { username ? \n        <div id = \"feed\">\n          <PhotoFeed user = {username} />\n        </div>\n        :(\n          <p></p>\n        )\n      }\n        <div id = \"form-pos\">\n          {form}\n        </div>\n        \n        {\n        profile ? \n          <div id = \"profile-pos\">\n            <Profile />\n          </div>\n        :(\n           <p></p>\n        )\n        }\n     \n      </div>     \n   \n    </div>\n  )\n}\n\n\nconst mapStateToProps = state => {\n  return {username: state.username}\n}\n\n\nexport default connect(mapStateToProps)(App);\n\n\n/*\n\n   <ul class=\"navbar-nav ml-auto\">\n            <li class=\"nav-item\">\n              <a class=\"nav-link\">Home</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\">About</a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" cursor = \"pointer\" onClick = {signIn()}>Logout</a>\n            </li>\n          </ul>\n\n\n*/","C:\\Users\\mopat\\instagram\\frontend\\src\\create-post.js",["42","43","44"],"import React, {useState} from \"react\"\r\nimport \"./create-post.css\"\r\nimport db from \"./firebase\";\r\nimport {storage} from \"./firebase\"\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Button from '@material-ui/core/Button';\r\nimport {connect} from 'react-redux';\r\nimport {ViewProfiles} from './Profile'\r\n\r\n\r\n\r\n\r\nexport function CreatePost(props) {\r\n    const [form, setForm] = useState(\"\")\r\n    const [submitted, setSubmitted] = useState(false)\r\n\r\n    const makePost = (e) => {\r\n        e.preventDefault()\r\n        if(!submitted){\r\n            setForm(<MakePostForm user = {props.user} />)\r\n            setSubmitted(true)\r\n        }\r\n        else{\r\n            setForm(null)\r\n            setSubmitted(false)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className = \"upload-btn\">\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                onClick = {makePost}\r\n                startIcon={<CloudUploadIcon />}\r\n            >Upload Image</Button>\r\n\r\n            <div>\r\n                <p>{form}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction MakePostForm({userID, posts, username}){\r\n    const date = String((new Date().getMonth() + 1) + '/' + new Date().getDate() + '/' + (new Date().getFullYear())) \r\n    const [pic, setPic] = useState(null)\r\n    const [desc, setDesc] = useState(\"\")\r\n    \r\n    console.log(userID)\r\n \r\n\r\n    const ImageChange = (e) => {\r\n        e.preventDefault()\r\n        if(e.target.files[0]){\r\n            setPic(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    const ImageUpload = (e) => {\r\n        e.preventDefault()\r\n        \r\n        const uploadTask = storage.ref(`posts/${pic.name}`).put(pic)\r\n        var number = Math.floor(Math.random() * 100000000)\r\n        updateUserPostCount(userID)\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n                console.log(\"posting\")\r\n            },\r\n            (error) => {\r\n                console.log(error)\r\n            },\r\n            () => {\r\n                storage\r\n                    .ref(\"posts\")\r\n                    .child(pic.name)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        var post = {\r\n                            name: username,\r\n                            timestamp: date,\r\n                            photo: url,\r\n                            description: String(desc),\r\n                            likes: 0,\r\n                            id: String(number),\r\n                            likedBy: new Array()\r\n                        }\r\n     \r\n                        db.collection(\"posts\").doc(String(number)).set(post)\r\n                            .then(function() {\r\n                                console.log(\"Document successfully written!\");\r\n                            })\r\n                            .catch(function(error) {\r\n                                console.error(\"Error writing document: \", error);\r\n                            });\r\n\r\n                        setDesc(\"\")\r\n                        setPic(null)\r\n\r\n                    })\r\n            }\r\n\r\n        )\r\n\r\n        document.getElementById(\"form\").style.visibility = \"hidden\";\r\n            \r\n    }\r\n\r\n\r\n    function updateUserPostCount(userID){\r\n        console.log(userID)\r\n        db.collection(\"profiles\").doc(userID).update({posts: posts + 1})\r\n            .then(function() {\r\n                console.log(\"Document successfully written!\");\r\n            })\r\n            .catch(function(error) {\r\n                console.error(\"Error writing document: \", error);\r\n            });\r\n    }\r\n\r\n\r\n    function closeForm(){\r\n        document.getElementById(\"form\").style.visibility = \"hidden\";\r\n        setDesc(\"\")\r\n        setPic(null)\r\n    }\r\n\r\n\r\n    return(\r\n        <div id = \"form\" className = \"post-form\">\r\n            <form className = \"form-items\">\r\n                <h2 id = \"username\">{username}</h2>\r\n                <p id = \"timestamp\">{date}</p>\r\n                <div className = \"input-forms\">\r\n                    <label className = \"label-forms\">Upload Photo: </label>                   \r\n                    <input style = {{marginBottom: \"25px\"}} id = \"picture\" type=\"file\" onChange = {ImageChange}/>\r\n                   \r\n                    <TextField\r\n                        style = {{marginBottom: \"15px\"}}\r\n                        className = \"post-description\"\r\n                        id=\"outlined-multiline-static\"\r\n                        label=\"Description\"\r\n                        multiline\r\n                        rows={4}\r\n                        defaultValue=\"\"\r\n                        variant=\"outlined\"\r\n                        onChange = {(e) => {setDesc(e.target.value)}}\r\n                    />\r\n              \r\n                </div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick = {closeForm}\r\n                > Close </Button>\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type = \"submit\"\r\n                    onClick = {ImageUpload}\r\n                > Post </Button>\r\n                        \r\n            </form>        \r\n        </div>\r\n                 \r\n    )\r\n   \r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.username,\r\n        userID: state.userID,\r\n        posts: state.posts\r\n    }\r\n}\r\n  \r\n  \r\nexport default connect(mapStateToProps)(MakePostForm);\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\nexport function NewPost(props){\r\n    const [likes, setLikes] = useState(props.likes)\r\n    const [likedByTheseUsers, setLikedByTheseUsers] = useState(props.likedBy)\r\n    const [profile, setProfile] = useState(null)\r\n    const [showPost, setShowPost] = useState(true)\r\n\r\n\r\n    function likePost(postId, username){ \r\n        if(likedByTheseUsers.indexOf(props.username) === -1){    \r\n            setLikes(likes + 1)            \r\n            db.collection(\"posts\").doc(`${postId}`).update({likes: likes+1})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n            \r\n            var tempLikedByTheseUsers = likedByTheseUsers\r\n            tempLikedByTheseUsers.push(username)\r\n            setLikedByTheseUsers(tempLikedByTheseUsers)\r\n            console.log(likedByTheseUsers)\r\n\r\n            db.collection(\"posts\").doc(`${postId}`).update({likedBy: likedByTheseUsers})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n\r\n            db.collection(\"posts\").doc(`${postId}`).update({likes: likedByTheseUsers.length})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n\r\n            updateUserLikeCount(props.username)\r\n        }   \r\n                   \r\n    }\r\n\r\n\r\n    function updateUserLikeCount(username){\r\n        var profileNames = []\r\n        \r\n        db.collection(\"profiles\").onSnapshot(function(doc) {\r\n            doc.forEach((info) => {       \r\n                profileNames.push(info)\r\n            })\r\n\r\n            for(let i = 0; i < profileNames.length; i++){\r\n                var userInfo = profileNames[i]\r\n                \r\n                if(userInfo.data().username === username){\r\n                    db.collection(\"profiles\").doc(userInfo.id).update({likes: userInfo.likes + 1})\r\n                }\r\n            }\r\n\r\n        })\r\n        \r\n    }\r\n\r\n\r\n\r\n    function showUserProfile(){\r\n        if(showPost){\r\n            setProfile(<ViewProfiles username = {document.getElementById(\"user-name\").innerHTML} />)\r\n            setShowPost(false)\r\n        }\r\n        else{\r\n            setShowPost(true)\r\n            setProfile(null)\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    return( \r\n        <div>\r\n          \r\n            <div className = \"post-body\">\r\n                <div className = \"post-header\">\r\n                    <h2 onClick = {showUserProfile} id = \"user-name\" className = \"post-text\" style = {{paddingLeft: \"5px\"}}>{props.name}</h2>\r\n                    <h2 className = \"post-text\" style = {{paddingRight: \"5px\"}}>{props.timestamp}</h2>\r\n                </div>\r\n\r\n                <div className = \"post-img\">\r\n                    <img id = \"display-image\" alt = \"Picture not available\" src= {props.photo} />\r\n                    \r\n                </div>\r\n\r\n                <div className = \"post-description\">\r\n                    <p id = \"description-text\"><b>Description: </b> {props.description} </p>\r\n                </div>\r\n                \r\n                <div className = \"post-likes\">                   \r\n                    <p id = \"likes-text\"><b> Likes: </b> {props.likes} </p> \r\n                    <FavoriteIcon  style = {{color: 'red'}} onClick = {() => {likePost(props.id, props.username)}} cursor = \"pointer\" />\r\n                  \r\n                </div>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    \r\n    )  \r\n}\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\nexport function ModalPost(){\r\n\r\n    return(\r\n        <div>\r\n           <button type=\"button\" class=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\">Open Modal</button>\r\n\r\n            <div id=\"myModal\" class=\"modal fade\" role=\"dialog\">\r\n            <div class=\"modal-dialog\">\r\n\r\n                <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 class=\"modal-title\">Modal Header</h4>\r\n                </div>\r\n                <div class=\"modal-body\">\r\n                    <p>Some text in the modal.</p>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\r\n                </div>\r\n                </div>\r\n\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\mopat\\instagram\\frontend\\src\\photo-feed.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\firebase.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\Login.js",["45"],"import React, {useState} from 'react'\r\nimport \"./Login.css\";\r\nimport {auth, provider} from \"./firebase\"\r\nimport {connect} from \"react-redux\"\r\nimport store from \"./store/index\"\r\nimport db from \"./firebase\"\r\n\r\n\r\n\r\nfunction Login() {\r\n\r\n    //const [userID, setUserID] = useState(\"\")\r\n\r\n\r\n    function signIn(){\r\n        auth\r\n        .signInWithPopup(provider)\r\n        .then((result) =>{\r\n\r\n          if(!checkForProfile(result.user.displayName)){\r\n            var profileNames = []\r\n\r\n            db.collection(\"profiles\").onSnapshot(function(doc) {\r\n                doc.forEach((info) => {       \r\n                    profileNames.push(info)\r\n                })\r\n    \r\n                for(let i = 0; i < profileNames.length; i++){\r\n                    var userInfo = profileNames[i]\r\n                    if(userInfo.data().username === result.user.displayName){\r\n                        store.dispatch({\r\n                            type: \"ADD_POST\",\r\n                            payload:\r\n                            {   \r\n                                username: userInfo.data().username,\r\n                                userphoto: result.user.photoURL,\r\n                                userID: userInfo.id,\r\n                                likes: userInfo.data().likes,\r\n                                posts: userInfo.data().posts,\r\n                                bio: userInfo.data().bio\r\n                                      \r\n                            }\r\n                          })\r\n                          console.log(userInfo.data().username)\r\n                          console.log(result.user.photoURL)\r\n                          console.log(userInfo.id)\r\n                          console.log(userInfo.data().likes)\r\n                          console.log(userInfo.data().posts)\r\n                          console.log(userInfo.data().bio)\r\n                    }\r\n                }\r\n\r\n            })\r\n            \r\n \r\n          }\r\n          else{\r\n              var userId = createProfile(result.user.displayName)\r\n              updateState(result.user.displayName, result.user.photoURL, userId)         \r\n          }\r\n    \r\n        })     \r\n    }\r\n\r\n\r\n    function checkForProfile(username){\r\n        \r\n        let profileNames = []\r\n        let isNewProfile = true\r\n\r\n        db.collection(\"profiles\").get().then((doc) => {\r\n            doc.forEach((info) => {       \r\n                profileNames.push(info.data().username)\r\n            })\r\n\r\n            for(let i = 0; i < profileNames.length; i++){\r\n                var name = profileNames[i]\r\n                if(name === username){\r\n                    isNewProfile = false\r\n                }\r\n            }\r\n            return isNewProfile\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    function createProfile(username){\r\n\r\n        const post = {\r\n            username: username,\r\n            bio: \"Edit your bio\",\r\n            likes: 0,\r\n            posts: 0\r\n        }      \r\n   \r\n        var doesProfileNotExist = checkForProfile(username)\r\n        \r\n        var number = Math.floor(Math.random() * 999999999)\r\n\r\n        if(doesProfileNotExist){\r\n          \r\n            db.collection(\"profiles\").doc(String(number)).set(post)\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n        }\r\n\r\n        //setUserID(String(number))\r\n        return String(number)\r\n\r\n    }\r\n\r\n\r\n    function updateState(name, photoURL, userId){\r\n       \r\n        store.dispatch({\r\n            type: \"ADD_POST\",\r\n            payload:\r\n            {   \r\n                username: name,\r\n                userphoto: photoURL,\r\n                userID: userId,\r\n                likes: 0,\r\n                posts: 0,\r\n                bio: \"Edit your own personal bio!\"\r\n                      \r\n            }\r\n          })\r\n    }\r\n\r\n\r\n    return (\r\n        <div id = \"login-pos\">\r\n            <div className = \"login-screen\">\r\n                <h1 id = \"welcome\"><i>Welcome to PhotoShare</i></h1>\r\n                <p id = \"slogan\"><i>Share your moments with the world</i></p>\r\n                <h2 id = \"title\"> Sign In </h2>\r\n                <button id = \"google-btn\" onClick = {signIn}>Google</button>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        dispatch\r\n    }\r\n}\r\nexport default connect(mapDispatchToProps)(Login)\r\n\r\n\r\n","C:\\Users\\mopat\\instagram\\frontend\\src\\store\\index.js",[],"C:\\Users\\mopat\\instagram\\frontend\\src\\Profile.js",["46","47"],"import React, {useState, useEffect} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport \"./Profile.css\"\r\nimport db from \"./firebase\";\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\n\r\n\r\nfunction Profile({ username, userID, userPhoto, likes, posts, bio }) {\r\n    const [editBio, setEditBio] = useState(false)\r\n    const [desc, setDesc] = useState(\"This is my bio\")\r\n\r\n    function changeBio(){\r\n        if(!editBio){\r\n            setEditBio(true)\r\n        }\r\n        else{\r\n            setEditBio(false)\r\n        }\r\n    }\r\n\r\n    function updateBio(){\r\n        db.collection(\"profiles\")    \r\n            .doc(userID).update({bio: desc})\r\n                .then(function() {\r\n                    console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document: \", error);\r\n                });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"profile-body\" style = {{backgroundColor: \"#f8f9f5\"}}>\r\n            <h1 id = \"profile-header\" style = {{marginBottom: \"20px\"}}>{username}'s Profile</h1>\r\n\r\n            <div className = \"user-picture\">\r\n                <img id = \"pro-pic\" src = {`${userPhoto}`} alt= \"pro pic\" />\r\n            </div>\r\n\r\n       \r\n            <div className = \"bio\">\r\n                <p>{bio}</p>\r\n                <button onClick = {changeBio}>Edit Bio</button>\r\n                {editBio ? \r\n                    <div>\r\n                        <input type = \"text\" onChange = {(e) => {setDesc(e.target.value)}}></input>\r\n                        <button onClick = {updateBio}>Update</button>\r\n                    </div>\r\n              \r\n                    :(\r\n                        null\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{username} has {posts} posts</p>\r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{username} has liked {likes} posts</p>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.username,\r\n        userPhoto: state.userPhoto,\r\n        userID: state.userID,\r\n        likes: state.likes,\r\n        posts: state.posts,\r\n        bio: state.bio\r\n    }\r\n  }\r\n  \r\n  \r\nexport default connect(mapStateToProps)(Profile);\r\n  \r\n\r\n\r\n\r\n\r\nexport function ViewProfiles(props){\r\n    const [user, setUser] = useState(props.username)\r\n    const [photo, setPhoto] = useState(\"\")\r\n    const [bio, setBio] = useState(\"\")\r\n    const [likes, setLikes] = useState(0)\r\n    const [posts, setPosts] = useState(0)\r\n    console.log(props.username)\r\n    const [displayProfile, setDisplayProfile] = useState(true)\r\n \r\n\r\n    useEffect(() => {\r\n        var profileNames = []\r\n\r\n        db.collection(\"profiles\").onSnapshot(function(doc) {\r\n            doc.forEach((info) => {       \r\n                profileNames.push(info)\r\n            })\r\n\r\n            for(let i = 0; i < profileNames.length; i++){\r\n                var userInfo = profileNames[i]\r\n                \r\n                if(userInfo.data().username === user){\r\n                    setBio(userInfo.data().bio)\r\n                    setLikes(userInfo.data().likes)\r\n                    setPosts(userInfo.data().posts) \r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    }, [user])\r\n\r\n    function toggleProfile(){     \r\n        setDisplayProfile(!displayProfile)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        {displayProfile ? \r\n        <div className = \"profile-body\" style = {{backgroundColor: \"#f8f9f5\"}}>\r\n\r\n            <h1 style = {{marginBottom: \"20px\"}}>{user}'s Profile</h1>\r\n\r\n            <div className = \"user-picture\">\r\n                <img id = \"pro-pic\" src = {photo} alt= \"pro pic\" />\r\n            </div>\r\n\r\n            <div className = \"bio\">\r\n                <p>{bio}</p>\r\n        \r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{user} has {posts} posts</p>\r\n            </div>\r\n\r\n            <div className = \"profile-info\">\r\n                <p>{user} has liked {likes} posts</p>\r\n            </div>\r\n\r\n            <button onClick = {toggleProfile}>close</button>\r\n\r\n        </div>\r\n        :(\r\n            <div>\r\n                <p></p>\r\n            </div>\r\n        )\r\n        }\r\n        </div>\r\n        \r\n    \r\n    )\r\n}\r\n\r\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":10,"column":9,"nodeType":"54","messageId":"55","endLine":10,"endColumn":18},{"ruleId":"56","severity":1,"message":"57","line":98,"column":38,"nodeType":"58","messageId":"59","endLine":98,"endColumn":49},{"ruleId":"52","severity":1,"message":"60","line":204,"column":12,"nodeType":"54","messageId":"55","endLine":204,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":291,"column":21,"nodeType":"63","endLine":291,"endColumn":98},{"ruleId":"52","severity":1,"message":"64","line":1,"column":16,"nodeType":"54","messageId":"55","endLine":1,"endColumn":24},{"ruleId":"52","severity":1,"message":"65","line":94,"column":18,"nodeType":"54","messageId":"55","endLine":94,"endColumn":25},{"ruleId":"52","severity":1,"message":"66","line":95,"column":19,"nodeType":"54","messageId":"55","endLine":95,"endColumn":27},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'ModalPost' is defined but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'profile' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useState' is defined but never used.","'setUser' is assigned a value but never used.","'setPhoto' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]